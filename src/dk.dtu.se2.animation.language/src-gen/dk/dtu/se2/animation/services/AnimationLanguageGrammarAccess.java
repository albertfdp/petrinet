/*
* generated by Xtext
*/
package dk.dtu.se2.animation.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AnimationLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class Animation_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Animation_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAnimationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cSequenceAnimationsAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cAnimationsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAnimationsAnimationParserRuleCall_1_2_0 = (RuleCall)cAnimationsAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cAnimationsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cAnimationsAnimationParserRuleCall_1_3_1_0 = (RuleCall)cAnimationsAssignment_1_3_1.eContents().get(0);
		
		//Animation_Impl returns Animation:
		//	Animation (";" {Sequence.animations+=current} animations+=Animation (";" animations+=Animation)*)?;
		public ParserRule getRule() { return rule; }

		//Animation (";" {Sequence.animations+=current} animations+=Animation (";" animations+=Animation)*)?
		public Group getGroup() { return cGroup; }

		//Animation
		public RuleCall getAnimationParserRuleCall_0() { return cAnimationParserRuleCall_0; }

		//(";" {Sequence.animations+=current} animations+=Animation (";" animations+=Animation)*)?
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//{Sequence.animations+=current}
		public Action getSequenceAnimationsAction_1_1() { return cSequenceAnimationsAction_1_1; }

		//animations+=Animation
		public Assignment getAnimationsAssignment_1_2() { return cAnimationsAssignment_1_2; }

		//Animation
		public RuleCall getAnimationsAnimationParserRuleCall_1_2_0() { return cAnimationsAnimationParserRuleCall_1_2_0; }

		//(";" animations+=Animation)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//";"
		public Keyword getSemicolonKeyword_1_3_0() { return cSemicolonKeyword_1_3_0; }

		//animations+=Animation
		public Assignment getAnimationsAssignment_1_3_1() { return cAnimationsAssignment_1_3_1; }

		//Animation
		public RuleCall getAnimationsAnimationParserRuleCall_1_3_1_0() { return cAnimationsAnimationParserRuleCall_1_3_1_0; }
	}

	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoveAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMoveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpeedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpeedEIntParserRuleCall_3_0 = (RuleCall)cSpeedAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Move:
		//	{Move} "move" "(" speed=EInt ")";
		public ParserRule getRule() { return rule; }

		//{Move} "move" "(" speed=EInt ")"
		public Group getGroup() { return cGroup; }

		//{Move}
		public Action getMoveAction_0() { return cMoveAction_0; }

		//"move"
		public Keyword getMoveKeyword_1() { return cMoveKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//speed=EInt
		public Assignment getSpeedAssignment_3() { return cSpeedAssignment_3; }

		//EInt
		public RuleCall getSpeedEIntParserRuleCall_3_0() { return cSpeedEIntParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ShowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Show");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cShowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Show:
		//	{Show} "show" "()";
		public ParserRule getRule() { return rule; }

		//{Show} "show" "()"
		public Group getGroup() { return cGroup; }

		//{Show}
		public Action getShowAction_0() { return cShowAction_0; }

		//"show"
		public Keyword getShowKeyword_1() { return cShowKeyword_1; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
	}

	public class HideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Hide");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHideAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHideKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelEStringParserRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Hide:
		//	{Hide} "hide" "(" label=EString ")";
		public ParserRule getRule() { return rule; }

		//{Hide} "hide" "(" label=EString ")"
		public Group getGroup() { return cGroup; }

		//{Hide}
		public Action getHideAction_0() { return cHideAction_0; }

		//"hide"
		public Keyword getHideKeyword_1() { return cHideKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//label=EString
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//EString
		public RuleCall getLabelEStringParserRuleCall_3_0() { return cLabelEStringParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class StopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Stop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStopAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Stop:
		//	{Stop} "stop" "(" ")";
		public ParserRule getRule() { return rule; }

		//{Stop} "stop" "(" ")"
		public Group getGroup() { return cGroup; }

		//{Stop}
		public Action getStopAction_0() { return cStopAction_0; }

		//"stop"
		public Keyword getStopKeyword_1() { return cStopKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnimationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnimationsAnimationParserRuleCall_2_0 = (RuleCall)cAnimationsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAnimationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAnimationsAnimationParserRuleCall_3_1_0 = (RuleCall)cAnimationsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Sequence:
		//	{Sequence} "[" animations+=Animation (";" animations+=Animation)* "]";
		public ParserRule getRule() { return rule; }

		//{Sequence} "[" animations+=Animation (";" animations+=Animation)* "]"
		public Group getGroup() { return cGroup; }

		//{Sequence}
		public Action getSequenceAction_0() { return cSequenceAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//animations+=Animation
		public Assignment getAnimationsAssignment_2() { return cAnimationsAssignment_2; }

		//Animation
		public RuleCall getAnimationsAnimationParserRuleCall_2_0() { return cAnimationsAnimationParserRuleCall_2_0; }

		//(";" animations+=Animation)*
		public Group getGroup_3() { return cGroup_3; }

		//";"
		public Keyword getSemicolonKeyword_3_0() { return cSemicolonKeyword_3_0; }

		//animations+=Animation
		public Assignment getAnimationsAssignment_3_1() { return cAnimationsAssignment_3_1; }

		//Animation
		public RuleCall getAnimationsAnimationParserRuleCall_3_1_0() { return cAnimationsAnimationParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class AnimationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Animation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cShowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHideParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStopParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSequenceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Animation:
		//	Move | Show | Hide | Stop | Sequence;
		public ParserRule getRule() { return rule; }

		//Move | Show | Hide | Stop | Sequence
		public Alternatives getAlternatives() { return cAlternatives; }

		//Move
		public RuleCall getMoveParserRuleCall_0() { return cMoveParserRuleCall_0; }

		//Show
		public RuleCall getShowParserRuleCall_1() { return cShowParserRuleCall_1; }

		//Hide
		public RuleCall getHideParserRuleCall_2() { return cHideParserRuleCall_2; }

		//Stop
		public RuleCall getStopParserRuleCall_3() { return cStopParserRuleCall_3; }

		//Sequence
		public RuleCall getSequenceParserRuleCall_4() { return cSequenceParserRuleCall_4; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private Animation_ImplElements pAnimation_Impl;
	private MoveElements pMove;
	private ShowElements pShow;
	private HideElements pHide;
	private StopElements pStop;
	private SequenceElements pSequence;
	private AnimationElements pAnimation;
	private EIntElements pEInt;
	private EStringElements pEString;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AnimationLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.dtu.se2.animation.AnimationLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Animation_Impl returns Animation:
	//	Animation (";" {Sequence.animations+=current} animations+=Animation (";" animations+=Animation)*)?;
	public Animation_ImplElements getAnimation_ImplAccess() {
		return (pAnimation_Impl != null) ? pAnimation_Impl : (pAnimation_Impl = new Animation_ImplElements());
	}
	
	public ParserRule getAnimation_ImplRule() {
		return getAnimation_ImplAccess().getRule();
	}

	//Move:
	//	{Move} "move" "(" speed=EInt ")";
	public MoveElements getMoveAccess() {
		return (pMove != null) ? pMove : (pMove = new MoveElements());
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}

	//Show:
	//	{Show} "show" "()";
	public ShowElements getShowAccess() {
		return (pShow != null) ? pShow : (pShow = new ShowElements());
	}
	
	public ParserRule getShowRule() {
		return getShowAccess().getRule();
	}

	//Hide:
	//	{Hide} "hide" "(" label=EString ")";
	public HideElements getHideAccess() {
		return (pHide != null) ? pHide : (pHide = new HideElements());
	}
	
	public ParserRule getHideRule() {
		return getHideAccess().getRule();
	}

	//Stop:
	//	{Stop} "stop" "(" ")";
	public StopElements getStopAccess() {
		return (pStop != null) ? pStop : (pStop = new StopElements());
	}
	
	public ParserRule getStopRule() {
		return getStopAccess().getRule();
	}

	//Sequence:
	//	{Sequence} "[" animations+=Animation (";" animations+=Animation)* "]";
	public SequenceElements getSequenceAccess() {
		return (pSequence != null) ? pSequence : (pSequence = new SequenceElements());
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}

	//Animation:
	//	Move | Show | Hide | Stop | Sequence;
	public AnimationElements getAnimationAccess() {
		return (pAnimation != null) ? pAnimation : (pAnimation = new AnimationElements());
	}
	
	public ParserRule getAnimationRule() {
		return getAnimationAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
