/**
 * This file is part of the ePNK project (Petri Net Kernel for eclipse). The ePNK
 *  is platform for Petri net tools based on the PNML transfer format. Its
 * main idea is to provide generic Petri net types which can be easily plugged
 *  in and a simple generic GMF editor, that can be used for graphically editing
 * nets of any plugged in type. Additional functionality can be plugged in.
 * 
 * Note that this project is still in an experimental phase, and is also used
 * as a case study for EMF/GMF based Model-based Software Engineering.
 * 
 * Copyright (C) 2010 Ekkart Kindler, eki@imm.dtu.dk
 * The license under which this software will be distributed is still to be decided -
 * it will probably be the EPL.
 *
 * $Id$
 */
package org.pnml.tools.epnk.pnmlcoremodel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.pnml.tools.epnk.pnmlcoremodel.util.PnmlcoremodelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PnmlcoremodelItemProviderAdapterFactory extends PnmlcoremodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PnmlcoremodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.PetriNetDoc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PetriNetDocItemProvider petriNetDocItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.PetriNetDoc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPetriNetDocAdapter() {
		if (petriNetDocItemProvider == null) {
			petriNetDocItemProvider = new PetriNetDocItemProvider(this);
		}

		return petriNetDocItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.PetriNet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PetriNetItemProvider petriNetItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.PetriNet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPetriNetAdapter() {
		if (petriNetItemProvider == null) {
			petriNetItemProvider = new PetriNetItemProvider(this);
		}

		return petriNetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.Page} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageItemProvider pageItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.Page}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageAdapter() {
		if (pageItemProvider == null) {
			pageItemProvider = new PageItemProvider(this);
		}

		return pageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.LabelProxy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabelProxyItemProvider labelProxyItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.LabelProxy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabelProxyAdapter() {
		if (labelProxyItemProvider == null) {
			labelProxyItemProvider = new LabelProxyItemProvider(this);
		}

		return labelProxyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.Arc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArcItemProvider arcItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.Arc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArcAdapter() {
		if (arcItemProvider == null) {
			arcItemProvider = new ArcItemProvider(this);
		}

		return arcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.Place} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlaceItemProvider placeItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.Place}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlaceAdapter() {
		if (placeItemProvider == null) {
			placeItemProvider = new PlaceItemProvider(this);
		}

		return placeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.RefPlace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefPlaceItemProvider refPlaceItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.RefPlace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefPlaceAdapter() {
		if (refPlaceItemProvider == null) {
			refPlaceItemProvider = new RefPlaceItemProvider(this);
		}

		return refPlaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.RefTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefTransitionItemProvider refTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.RefTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefTransitionAdapter() {
		if (refTransitionItemProvider == null) {
			refTransitionItemProvider = new RefTransitionItemProvider(this);
		}

		return refTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.Name} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameItemProvider nameItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.Name}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNameAdapter() {
		if (nameItemProvider == null) {
			nameItemProvider = new NameItemProvider(this);
		}

		return nameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.ArcGraphics} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArcGraphicsItemProvider arcGraphicsItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.ArcGraphics}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArcGraphicsAdapter() {
		if (arcGraphicsItemProvider == null) {
			arcGraphicsItemProvider = new ArcGraphicsItemProvider(this);
		}

		return arcGraphicsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.NodeGraphics} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeGraphicsItemProvider nodeGraphicsItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.NodeGraphics}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeGraphicsAdapter() {
		if (nodeGraphicsItemProvider == null) {
			nodeGraphicsItemProvider = new NodeGraphicsItemProvider(this);
		}

		return nodeGraphicsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.AnnotationGraphics} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationGraphicsItemProvider annotationGraphicsItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.AnnotationGraphics}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationGraphicsAdapter() {
		if (annotationGraphicsItemProvider == null) {
			annotationGraphicsItemProvider = new AnnotationGraphicsItemProvider(this);
		}

		return annotationGraphicsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.Line} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LineItemProvider lineItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.Line}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLineAdapter() {
		if (lineItemProvider == null) {
			lineItemProvider = new LineItemProvider(this);
		}

		return lineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.Coordinate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoordinateItemProvider coordinateItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.Coordinate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoordinateAdapter() {
		if (coordinateItemProvider == null) {
			coordinateItemProvider = new CoordinateItemProvider(this);
		}

		return coordinateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.Fill} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FillItemProvider fillItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.Fill}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFillAdapter() {
		if (fillItemProvider == null) {
			fillItemProvider = new FillItemProvider(this);
		}

		return fillItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.Font} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FontItemProvider fontItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.Font}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFontAdapter() {
		if (fontItemProvider == null) {
			fontItemProvider = new FontItemProvider(this);
		}

		return fontItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.EmptyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmptyTypeItemProvider emptyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.EmptyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmptyTypeAdapter() {
		if (emptyTypeItemProvider == null) {
			emptyTypeItemProvider = new EmptyTypeItemProvider(this);
		}

		return emptyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.ToolInfoText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToolInfoTextItemProvider toolInfoTextItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.ToolInfoText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToolInfoTextAdapter() {
		if (toolInfoTextItemProvider == null) {
			toolInfoTextItemProvider = new ToolInfoTextItemProvider(this);
		}

		return toolInfoTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pnmlcoremodel.PageLabelProxy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageLabelProxyItemProvider pageLabelProxyItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pnmlcoremodel.PageLabelProxy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageLabelProxyAdapter() {
		if (pageLabelProxyItemProvider == null) {
			pageLabelProxyItemProvider = new PageLabelProxyItemProvider(this);
		}

		return pageLabelProxyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (petriNetDocItemProvider != null) petriNetDocItemProvider.dispose();
		if (petriNetItemProvider != null) petriNetItemProvider.dispose();
		if (pageItemProvider != null) pageItemProvider.dispose();
		if (labelProxyItemProvider != null) labelProxyItemProvider.dispose();
		if (arcItemProvider != null) arcItemProvider.dispose();
		if (placeItemProvider != null) placeItemProvider.dispose();
		if (refPlaceItemProvider != null) refPlaceItemProvider.dispose();
		if (refTransitionItemProvider != null) refTransitionItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (nameItemProvider != null) nameItemProvider.dispose();
		if (arcGraphicsItemProvider != null) arcGraphicsItemProvider.dispose();
		if (nodeGraphicsItemProvider != null) nodeGraphicsItemProvider.dispose();
		if (annotationGraphicsItemProvider != null) annotationGraphicsItemProvider.dispose();
		if (lineItemProvider != null) lineItemProvider.dispose();
		if (coordinateItemProvider != null) coordinateItemProvider.dispose();
		if (fillItemProvider != null) fillItemProvider.dispose();
		if (fontItemProvider != null) fontItemProvider.dispose();
		if (emptyTypeItemProvider != null) emptyTypeItemProvider.dispose();
		if (toolInfoTextItemProvider != null) toolInfoTextItemProvider.dispose();
		if (pageLabelProxyItemProvider != null) pageLabelProxyItemProvider.dispose();
	}

}
